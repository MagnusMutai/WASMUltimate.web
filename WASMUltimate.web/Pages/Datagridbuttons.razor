@page "/datagridbuttons"

<div style="width:1500px">

    <SfGrid @ref="employeeGrid" DataSource="@Employees" AllowPaging="true" AllowSorting="true" AllowGrouping="true"
            Toolbar="@(new List<string>() {"Add", "Cancel"})">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridPageSettings PageSizes="true" PageSize="5"></GridPageSettings>
        <GridEvents CommandClicked="OnCommandClicked" OnActionBegin="ActionBeginHandler" TValue="Employee"> </GridEvents>
        <GridColumns>
            <GridColumn AllowAdding="false" IsPrimaryKey="true" Field="@nameof(Employee.EmployeeId)" HeaderText="ID" Width="60px"></GridColumn>
            <GridColumn Field="@nameof(Employee.FirstName)" HeaderText="First Name" ValidationRules="@(new ValidationRules() { Required = true, MinLength = 2 })"></GridColumn>
            <GridColumn Field="@nameof(Employee.LastName)" HeaderText="Last Name" ValidationRules="@(new ValidationRules() { Required = true, MinLength = 2})"></GridColumn>
            <GridColumn Field="@nameof(Employee.DateOfBirth)" Format="d"></GridColumn>
            <GridColumn Field="@nameof(Employee.Gender)" Format="d" HeaderText="Gender" Width="140px">
                <EditTemplate>
                    <SfDropDownList DataSource="@GenderEnumValues" TItem="string" TValue="Gender" @bind-Value="@((context as Employee).Gender)">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(Employee.Email)" HeaderText="Email"></GridColumn>
            <GridColumn HeaderText="Actions" Width="110">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() 
                    { IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions()
                    { IconCss = "e-icons e-delete", CssClass="e-flat"})"></GridCommandColumn>                                                                                         
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions()
                    { IconCss = "e-icons e-update", CssClass = "e-flat"})"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions()
                    {IconCss = "e-icons e-cancel-icon", CssClass = "e-flat"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridColumn HeaderText="Custom Actions">
                <GridCommandColumns>
                    <GridCommandColumn ID="Uppercase" ButtonOption="@(new CommandButtonOptions()
                    { Content = "U", CssClass = "e-outline"})"></GridCommandColumn>
                    <GridCommandColumn ID="Lowercase" ButtonOption="@(new CommandButtonOptions()
                    { Content = "L", CssClass = "e-outline"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>

</div>

@code {

    public List<Employee> Employees { get; set; }

    public SfGrid<Employee> employeeGrid { get; set; }

    public string[] GenderEnumValues { get; set; } = Enum.GetNames(typeof(Gender));

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employees = (await EmployeeService.GetAllEmployees()).ToList();
    }

    public void OnCommandClicked(CommandClickEventArgs<Employee> args)
    {
        if(args.CommandColumn.ID == "Uppercase")
        {
            args.RowData.FirstName = args.RowData.FirstName.ToUpper();
            employeeGrid.Refresh();
        }
        else
        {
            args.RowData.FirstName = args.RowData.FirstName.ToLower();
            employeeGrid.Refresh();
        }
    }

    public async void ActionBeginHandler(ActionEventArgs<Employee> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await EmployeeService.AddEmployee(args.Data);
            }
            else
            {
                await EmployeeService.UpdateEmployee(args.Data);
            }
        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await EmployeeService.DeleteEmployee(args.Data.EmployeeId);
        }
    }

}