@page "/gridedit"


<SfGrid @ref="employeeGrid" DataSource="@Employees" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Update", "Delete", "Cancel" })">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Batch">
            <HeaderTemplate>
                <span>@GetHeaderText(context as Employee)</span>
            </HeaderTemplate>

            <FooterTemplate>
                <SfButton OnClick="@Save" IsPrimary="true">@SaveButtonText</SfButton>
            <SfButton OnClick="@Cancel">Cancel</SfButton>
            </FooterTemplate>
        </GridEditSettings>
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompeteHandler" OnBatchSave="BatchSaveHandler" TValue="Employee"></GridEvents>
        <GridColumns>
            <GridColumn AllowAdding="false" IsPrimaryKey="true" Field="@nameof(Employee.EmployeeId)" HeaderText="ID" Width="40px"></GridColumn>
            <GridColumn Field="@nameof(Employee.FirstName)" HeaderText="First Name"></GridColumn>
            <GridColumn Field="@nameof(Employee.LastName)" HeaderText="Last Name"></GridColumn>
            <GridColumn Field="@nameof(Employee.DateOfBirth)" HeaderText="Date Of Birth" Format="d"></GridColumn>
        <GridColumn Field="@nameof(Employee.DepartmentId)" HeaderText="Department" Width="140px">
            <Template>
                <span>@GetDepartmentNameById((context as Employee).DepartmentId)</span>
            </Template>
            <EditTemplate>
                <SfDropDownList TItem="Department" TValue="int" DataSource="@Departments"
                                @bind-Value="@((context as Employee).DepartmentId)" ID="DepartmentId">
                    <DropDownListFieldSettings Text="DepartmentName" Value="DepartmentId">
                    </DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
            <GridColumn Field="@nameof(Employee.Gender)" HeaderText="Gender" Width="140px">

                <EditTemplate>
                    <SfDropDownList DataSource="@GenderEnumValues" TItem="string" TValue="Gender" @bind-Value="@((context as Employee).Gender)">
                    </SfDropDownList>
                </EditTemplate>

            </GridColumn>
            <GridColumn Field="@nameof(Employee.Email)" HeaderText="Email"></GridColumn>
        </GridColumns>
    </SfGrid>

@code{
    public List<Employee> Employees { get; set; }

    public List<Department> Departments { get; set; }

    public SfGrid<Employee> employeeGrid { get; set; }

    public string SaveButtonText { get; set; }

    public string[] GenderEnumValues { get; set; } = Enum.GetNames(typeof(Gender));

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    [Inject]
    public IDepartmentService DepartmentService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employees = (await EmployeeService.GetAllEmployees()).ToList();
        Departments = (await DepartmentService.GetAllDepartments()).ToList();
    }

    public async Task BatchSaveHandler(BeforeBatchSaveArgs<Employee> Args)
    {
        var updates = Args.BatchChanges.ChangedRecords;
        var inserts = Args.BatchChanges.AddedRecords;
        var deletes = Args.BatchChanges.DeletedRecords;

        foreach(Employee employee in updates)
        {
            await EmployeeService.UpdateEmployee(employee);
            Employees = (await EmployeeService.GetAllEmployees()).ToList();
        }

        foreach (Employee employee in inserts)
        {
            await EmployeeService.AddEmployee(employee);
            Employees = (await EmployeeService.GetAllEmployees()).ToList();
        }

        foreach (Employee employee in deletes)
        {
            await EmployeeService.DeleteEmployee(employee.EmployeeId );
            Employees = (await EmployeeService.GetAllEmployees()).ToList();
        }
    } 


    public string GetDepartmentNameById(int id)
    {
        if(id == 0)
        {
            return null;
        }
        else
        {
            return Departments.FirstOrDefault(d => d.DepartmentId == id).DepartmentName;
        }
    }

    public async Task Cancel ()
    {
        await employeeGrid.CloseEditAsync();
    }

    public async Task Save()
    {
        await employeeGrid.EndEditAsync();
    }

    public string GetHeaderText (Employee employee)
    {
        if(employee.EmployeeId == 0)
        {
            SaveButtonText = "Add";
            return "Add New Employee";
        }
        else
        {
            SaveButtonText = "Update";
            return $"Edit {employee.FirstName} Details";
        }
    }

    public async void ActionBeginHandler(ActionEventArgs<Employee> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                await EmployeeService.AddEmployee(Args.Data);
                // Employees = (await EmployeeService.GetAllEmployees()).ToList();
                // employeeGrid.Refresh();
            }
            else
            {
                await EmployeeService.UpdateEmployee(Args.Data);

            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await EmployeeService.DeleteEmployee(Args.Data.EmployeeId);
        }
    }

    public async void ActionCompeteHandler(ActionEventArgs<Employee> Args)
    {
        if(Args.Action =="Add")
        {
                Employees = (await EmployeeService.GetAllEmployees()).ToList();
                employeeGrid?.Refresh();
        }
    }


}