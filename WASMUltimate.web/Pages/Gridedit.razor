@page "/gridedit"


<SfGrid @ref="employeeGrid" DataSource="@Employees" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Update", "Delete", "Cancel" })">
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridEvents OnActionBegin="ActionBeginHandler" TValue="Employee"></GridEvents>
        <GridColumns>
            <GridColumn AllowAdding="false" IsPrimaryKey="true" Field="@nameof(Employee.EmployeeId)" HeaderText="ID" Width="40px"></GridColumn>
            <GridColumn Field="@nameof(Employee.FirstName)" HeaderText="First Name"></GridColumn>
            <GridColumn Field="@nameof(Employee.LastName)" HeaderText="Last Name"></GridColumn>
            <GridColumn Field="@nameof(Employee.DateOfBirth)" HeaderText="Date Of Birth"></GridColumn>
        <GridForeignColumn HeaderText="Department" TValue="Department" Field="@nameof(Employee.DepartmentId)" ForeignDataSource="@Departments" ForeignKeyValue="DepartmentName" Width="140px">
            <EditTemplate>
                <SfDropDownList TItem="Department" TValue="int" DataSource="@Departments"
                                @bind-Value="@((context as Employee).DepartmentId)" ID="DepartmentId">
                    <DropDownListFieldSettings Text="DepartmentName" Value="DepartmentId">
                    </DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridForeignColumn>
            <GridColumn Field="@nameof(Employee.Gender)" HeaderText="Gender" Width="140px">

                <EditTemplate>
                    <SfDropDownList DataSource="@GenderEnumValues" TItem="string" TValue="Gender" @bind-Value="@((context as Employee).Gender)">
                    </SfDropDownList>
                </EditTemplate>

            </GridColumn>
            <GridColumn Field="@nameof(Employee.Email)" HeaderText="Email"></GridColumn>
        </GridColumns>
    </SfGrid>

@code{
    public List<Employee> Employees { get; set; }

    public List<Department> Departments { get; set; }

    public SfGrid<Employee> employeeGrid { get; set; }

    public string[] GenderEnumValues { get; set; } = Enum.GetNames(typeof(Gender));

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    [Inject]
    public IDepartmentService DepartmentService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employees = (await EmployeeService.GetAllEmployees()).ToList();
        Departments = (await DepartmentService.GetAllDepartments()).ToList();
    }

    public async void ActionBeginHandler(ActionEventArgs<Employee> Args)
    {
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (Args.Action == "Add")
            {
                await EmployeeService.AddEmployee(Args.Data);
                Employees = (await EmployeeService.GetAllEmployees()).ToList();
                employeeGrid.Refresh();
            }
            else
            {
                await EmployeeService.UpdateEmployee(Args.Data);
                Employees = (await EmployeeService.GetAllEmployees()).ToList();
                employeeGrid.Refresh();
            }
        }
        if (Args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await EmployeeService.DeleteEmployee(Args.Data.EmployeeId);
        }
    }

}